* {
    box-sizing: border-box;
  }
  
  /* 
    These rules apply to actual HTML elements with no labelling!
    So: they style the tags directly
  */
  
  html {
    background-color: #fff;
    font-size: 16px;
    min-width: 300px;
    overflow-x: hidden;
    overflow-y: scroll;
  
    /* these are specific to different browsers */
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
    -webkit-text-size-adjust: 100%;
    -moz-text-size-adjust: 100%;
    text-size-adjust: 100%;
  }
  
  body {
    margin: 0;
    padding: 0;
  
    font-family:
    serif;
    /*sans-serif*/
    /*monospace*/
    /*cursive*/
    /*Verdana, Geneva, Tahoma, sans-serif;*/
    /*Georgia, 'Times New Roman', Times, serif*/
    /*Cambria, Cochin, Georgia, Times, 'Times New Roman', serif*/
    /*Arial, Helvetica, sans-serif*/
    /*'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif*/
    /*'Times New Roman', Times, serif*/
    /*'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif*/
    /*'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif*/
    /*'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif*/
    font-weight: 400;
    line-height: 1.5;
    background-color:ivory;
  }
  
  
  a {
    display: inline-block;
    text-decoration: none;
  }
  
  h2 {
    margin:0;
    padding:0;
    padding-bottom:1.5rem;
  }
  
  form {
    accent-color: hsla(120, 100%, 50%, 0.482);
  }
  
  /*
    - These styles use 'class names'
    - You can apply them by using the 'class' attribute on your HTML
    - like this: <div class="wrapper">
    - note that the period vanishes there!
  */
  
  
  .wrapper {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    margin: 0;
    flex: 1;
  }
  
  .container {
    margin: 0 20px;
    display: flex;
    justify-content: space-evenly;
    align-items: start;
    flex:1;
  }
  
  .header {
    padding-top: 0rem;
    padding-left: 0rem;
    padding-right: 0rem;
    padding-bottom: 0rem;
  }
  
  
  /*
    This rule implies that the H1 tag lives within another HTML tag
    It "inherits" some rules from the above
    Those rules won't apply to an h1 that's outside a block with the class of 'header'
  */
  
  .header h1 {
    display: block;
    /* this will push other blocks out of the way */
  
    /* colors */
    background-color:rgb(212, 145, 122);
    color:#4a4a4a;
  
    /* shapes */
    border-radius: 7px;
    font-size: 2.0rem;
    padding: 1.5rem;
    margin:0px; /* removing the margin on h1 tags means the header pins to the top if we move */

  
    /* box-shadows are fancy */
    box-shadow: 0 0.5em 1em -0.125em rgb(10 10 10 / 10%), 0 0 0 1px rgb(10 10 10 / 2%);
  }
  
  .header h2 {
   
    display: flex;
    justify-content: space-evenly;
    flex-direction: row;
    /* this will push other blocks out of the way */
  
    /* colors */
    background-color: #ffb98a;
    color: #4a4a4a;
  
    /* shapes */
    border-radius: 5px;
    font-size: 1rem;
    padding: 1rem;
    margin:0; /* removing the margin on h1 tags means the header pins to the top if we move */
  
  
    /* box-shadows are fancy */
    box-shadow: 0 0.5em 1em -0.125em rgb(10 10 10 / 10%), 0 0 0 1px rgb(10 10 10 / 2%);
  }
  
  /*
    Rules can be combined on a block to apply the 'cascade' in order
    So you can use two classnames in a single class attribute
    like: <div class="box section">
  
    Rules may combine in unexpected ways - remember that the LAST thing written in this file will have "priority"
    And will be what displays in your client
  */
  
  .box {
    background-color: rgba(239, 239, 239, 0.40);
    border: 2px dashed;
    border-radius: 4px;
  
    width: fit-content;
    height:fit-content;
    padding: 1.5rem;
    margin: 0 auto;
  }
  
  .left_section {
    background-color:lightblue;
    flex: 0 1 auto;
    margin: 1rem;
    padding: 1.5rem;
  }
  
  .right_section {
    background-color:lightblue ;
    flex: 1 2 auto;
    margin: 1rem;
    align-items: center;
    max-width: 450px;
  }

  .middle_section {
    background-color: lightblue;
    flex: 1 2 auto;
    margin: 1rem;
    align-items: flex-end;
    max-width: 450px;
  }
  
  /*
    This block is actually dependent on the "container" block having a flex set on it
    and the "wrapper" block displaying as a flex column with a "vertical height" (vh) of 100.
    That serves to cram the footer to the bottom of the page.
  */
  
  .footer {
    flex-shrink: 0;
    padding: 1rem;
    background-color: rgba(0, 139, 139, 0.8);
    font-size: 1.2rem;
    font-weight: 600;
  }
  
  .footer a {
    color: rgba(255, 224, 138, 1);
    text-decoration: underline;
  }
  
  /*
    This is an example of a 'pseudoclass'
    In this instance, it says what to do if a mouse hovers over a link
    This is pretty desktop-specific, since there's no hover function on touchscreens
  */
  .footer a:hover {
    /* Hue, saturation, luminosity, alpha */
    background-color: hsla(0, 0%, 90%, 0.15);
    /* red, green, blue, alpha */
    color: rgb(246, 169, 93);
    text-decoration: none;
  }
  
  .subtitle {
    color: rgba(0, 0, 0, 0.8);
    margin: 0px;
    margin-bottom: 5px;
  }
  
  
  /* Deploy this with images as direct "children" and the images should pop into shape */
  .grid {
    display: flex;
    justify-content: space-evenly;
    flex-flow: wrap;
    width: 350px;
    height: 350px;
    margin: 0 auto;
  }
  
  .grid img {
    width: 150px;
    height: 150px;
  }
  
  
  /* Carousel */
  div.carousel {
    max-width: 300px;
    overflow: hidden;
    text-align: center;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    margin: 0 auto;
    margin-bottom: 1rem;
  }
  
  .carousel .slides {
    display: flex;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
  }
  
  /* .carousel_item, */
  .hidden {
    display: none;
  }
  
  .visible {
    display: block;
  }
  
  .carousel_item img {
    /* 
      Setting width, rather than max-width or min-width,
      means annoying pop-ins won't happen
      but it also means you need to format your images to be compatible
      or they will stretch weird
  
      - try a tall one and see what happens
      - change the height on a fixed image size and see what happens
      - now make sure that images are _always_ square
      - ... there's a reason crop tools are popular in image editors
     */
    width: 150px; 
  }
  
  .prev,
  .next {
    border: none;
    margin: 2px;
    text-align: center;
    border-radius: 5px;
    font-weight: bold;
    height: 45px;
    padding: 10px;
    line-height: 0; /* This centers a button's text! */
    border: 2px solid rgb(99,99,99); /* shorthand for how to do a border */
  }

  .navigation {
     overflow: hidden;
     background-color:rgb(255, 206, 190);
  }

  .navigation a{
    float: left;
    display: block;
    color:#4a4a4a;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    font-size: 17px;
  }

  .navigation a:hover{
    background-color: beige;
    color:#4a4a4a;
  }

  .navigation a.active{
    background-color:#E0AFA0;
    color:#4a4a4a;
  }

  .navigation input[type=text] {
    float: right;
    padding: 6px;
    border: none;
    margin-top: 8px;
    margin-right: 16px;
    font-size: 17px;
  }

  .navigation a, .topnav input[type=text] {
    float: none;
    display: block;
    text-align: left;
    width: 100%;
    margin: 0;
    padding: 14px;
  }
  .navigation input[type=text] {
    border: 1px solid #ccc;
  }




  
  .prev:focus,
  .next:focus {
    margin: 0;
    /* Pick a good border colour and check out how it works with your buttons */
  }
  
  .prev:hover,
  .next:hover {
    /* Pick a good background colour for your hover pseudoclass */
  }
  